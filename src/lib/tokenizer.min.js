"use strict";const MODE_NONE="modeNone",MODE_DEFAULT="modeDefault",MODE_MATCH="modeMatch",sortTokenizableSubstrings=(t,e)=>t.length>e.length?-1:t.length<e.length?1:0,endsWith=(t,e)=>-1!==t.indexOf(e,t.length-e.length);class Tokenizer{constructor(t,e,s){this.factory=t,this.str=e,this.forEachToken=s,this.previousChr="",this.toMatch="",this.currentToken="",this.modeStack=[MODE_NONE],this.currentIndex=0}getCurrentMode(){return this.modeStack[this.modeStack.length-1]}setCurrentMode(t){return this.modeStack.push(t)}completeCurrentMode(){const t=this.getCurrentMode();return t===MODE_DEFAULT&&this.pushDefaultModeTokenizables(),(t===MODE_MATCH&&""===this.currentToken||""!==this.currentToken)&&this.push(this.currentToken),this.currentToken="",this.modeStack.pop()}push(t){let e="";if(this.factory.convertLiterals&&this.getCurrentMode()!==MODE_MATCH)switch(t.toLowerCase()){case"null":t=null;break;case"true":t=!0;break;case"false":t=!1;break;default:isFinite(t)&&(t=Number(t))}else e=this.toMatch;this.forEachToken&&this.forEachToken(t,e,this.currentIndex)}tokenize(){let t=0;for(;t<this.str.length;)this.currentIndex=t,this.consume(this.str.charAt(t++));for(;this.getCurrentMode()!==MODE_NONE;)this.completeCurrentMode()}consume(t){this[this.getCurrentMode()](t),this.previousChr=t}[MODE_NONE](t){if(!this.factory.matchMap[t])return this.setCurrentMode(MODE_DEFAULT),this.consume(t);this.setCurrentMode(MODE_MATCH),this.toMatch=t}[MODE_DEFAULT](t){if(this.factory.delimiterMap[t])return this.completeCurrentMode();if(this.factory.matchMap[t]){let i=0;for(;i<this.factory.tokenizeList.length;)if(e=this.currentToken,s=this.factory.tokenizeList[i++],-1!==e.indexOf(s,e.length-s.length))return this.completeCurrentMode(),this.consume(t)}var e,s;return this.currentToken+=t,this.currentToken}pushDefaultModeTokenizables(){let t=0,e=1/0,s=null;for(;this.currentToken&&t<this.factory.tokenizeList.length;){const i=this.factory.tokenizeList[t++],r=this.currentToken.indexOf(i);-1!==r&&r<e&&(e=r,s=i)}if(s)return e>0&&this.push(this.currentToken.substring(0,e)),-1!==e?(this.push(s),this.currentToken=this.currentToken.substring(e+s.length),this.pushDefaultModeTokenizables()):void 0}[MODE_MATCH](t){if(t===this.toMatch){if(this.previousChr!==this.factory.escapeCharacter)return this.completeCurrentMode();this.currentToken=this.currentToken.substring(0,this.currentToken.length-1)}return this.currentToken+=t,this.currentToken}}class TokenizeThis{constructor(t){t||(t={}),t=Object.assign({},this.constructor.defaultConfig,t),this.convertLiterals=t.convertLiterals,this.escapeCharacter=t.escapeCharacter,this.tokenizeList=[],this.tokenizeMap={},this.matchList=[],this.matchMap={},this.delimiterList=[],this.delimiterMap={},t.shouldTokenize.sort(sortTokenizableSubstrings).forEach((t=>{this.tokenizeMap[t]||(this.tokenizeList.push(t),this.tokenizeMap[t]=t)})),t.shouldMatch.forEach((t=>{this.matchMap[t]||(this.matchList.push(t),this.matchMap[t]=t)})),t.shouldDelimitBy.forEach((t=>{this.delimiterMap[t]||(this.delimiterList.push(t),this.delimiterMap[t]=t)}))}tokenize(t,e){return new Tokenizer(this,t,e).tokenize()}static get defaultConfig(){return{shouldTokenize:["(",")",",","*","/","%","+","-","=","!=","!","<",">","<=",">=","^"],shouldMatch:['"',"'","`"],shouldDelimitBy:[" ","\n","\r","\t"],convertLiterals:!0,escapeCharacter:"\\"}}}